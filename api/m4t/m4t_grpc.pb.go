// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: m4t.proto

package m4t

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextToAudio_ConvertTextToAudio_FullMethodName = "/m4t.TextToAudio/ConvertTextToAudio"
)

// TextToAudioClient is the client API for TextToAudio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextToAudioClient interface {
	ConvertTextToAudio(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*AudioResponse, error)
}

type textToAudioClient struct {
	cc grpc.ClientConnInterface
}

func NewTextToAudioClient(cc grpc.ClientConnInterface) TextToAudioClient {
	return &textToAudioClient{cc}
}

func (c *textToAudioClient) ConvertTextToAudio(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*AudioResponse, error) {
	out := new(AudioResponse)
	err := c.cc.Invoke(ctx, TextToAudio_ConvertTextToAudio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextToAudioServer is the server API for TextToAudio service.
// All implementations must embed UnimplementedTextToAudioServer
// for forward compatibility
type TextToAudioServer interface {
	ConvertTextToAudio(context.Context, *TextRequest) (*AudioResponse, error)
	mustEmbedUnimplementedTextToAudioServer()
}

// UnimplementedTextToAudioServer must be embedded to have forward compatible implementations.
type UnimplementedTextToAudioServer struct {
}

func (UnimplementedTextToAudioServer) ConvertTextToAudio(context.Context, *TextRequest) (*AudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertTextToAudio not implemented")
}
func (UnimplementedTextToAudioServer) mustEmbedUnimplementedTextToAudioServer() {}

// UnsafeTextToAudioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextToAudioServer will
// result in compilation errors.
type UnsafeTextToAudioServer interface {
	mustEmbedUnimplementedTextToAudioServer()
}

func RegisterTextToAudioServer(s grpc.ServiceRegistrar, srv TextToAudioServer) {
	s.RegisterService(&TextToAudio_ServiceDesc, srv)
}

func _TextToAudio_ConvertTextToAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextToAudioServer).ConvertTextToAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextToAudio_ConvertTextToAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextToAudioServer).ConvertTextToAudio(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextToAudio_ServiceDesc is the grpc.ServiceDesc for TextToAudio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextToAudio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "m4t.TextToAudio",
	HandlerType: (*TextToAudioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertTextToAudio",
			Handler:    _TextToAudio_ConvertTextToAudio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m4t.proto",
}
